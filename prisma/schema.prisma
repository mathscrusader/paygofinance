datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String?              @unique
  password             String
  phone                String?
  country              String?
  language             String?
  avatarUrl            String?
  twoFactor            Boolean              @default(false)
  notifyEmail          Boolean              @default(true)
  notifySms            Boolean              @default(false)
  notifyPush           Boolean              @default(true)
  notifyMarketing      Boolean              @default(false)
  currencyCode         String?
  payIdBalance         Float                @default(0)
  balance              Int                  @default(0)
  createdAt            DateTime             @default(now())
  plan                 Plan?                @relation(fields: [planId], references: [id])
  planId               Int?
  transactions         Transaction[]
  airtimeTransactions  AirtimeTransaction[]
  notifications        Notification[]       
}

model Plan {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  price       Int
  users       User[]
}

model Transaction {
  id         Int      @id @default(autoincrement())
  type       String
  amount     Int
  status     String
  network    String?
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  receiptUrl String?
}

model AirtimeTransaction {
  id          String   @id @default(cuid())
  userId      String
  network     String
  amount      Float
  phoneNumber String
  discount    Float
  cost        Float
  status      String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Network {
  id         String     @id @default(cuid())
  name       String     @unique
  color      String     // Tailwind color class (e.g., "bg-yellow-500")
  rates      Rate[]
  dataPlans  DataPlan[]
}

model Rate {
  id         String   @id @default(cuid())
  amount     Float
  discount   Float
  network    Network  @relation(fields: [networkId], references: [id])
  networkId  String
}

/// New model to represent each data‚Äêbundle plan
model DataPlan {
  id            String   @id @default(cuid())
  size          String
  duration      String
  price         Int
  originalPrice Int
  network       Network  @relation(fields: [networkId], references: [id])
  networkId     String
  createdAt     DateTime @default(now())
}

/// Notifications for users
model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
